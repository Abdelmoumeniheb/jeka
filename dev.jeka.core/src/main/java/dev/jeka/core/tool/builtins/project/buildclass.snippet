import dev.jeka.core.api.java.JkJavaVersion;
import dev.jeka.core.api.project.JkProject;
import dev.jeka.core.api.testing.JkTestProcessor;
import dev.jeka.core.api.tooling.JkGitProcess;
import dev.jeka.core.tool.JkBean;
import dev.jeka.core.tool.builtins.project.ProjectJkBean;

class Build extends JkBean {

    final ProjectJkBean projectBean = getBean(ProjectJkBean.class).lately(this::configure);

    /*
     * Configures plugins to be bound to this command class. When this method is called, option
     * fields have already been injected from command line.
     */
    private void configure(JkProject project) {
        project.setJvmTargetVersion(JkJavaVersion.V8);
        project.compilation.configureDependencies(deps -> deps
                .and("com.google.guava:guava:21.0")
        );

        // this testing setup is almost default setting, this is here for illustration purpose
        // If default is ok for you, you can remove it.
        project.testing.testSelection.addIncludeStandardPatterns();
        project.testing.testProcessor.setForkingProcess(true);
        project.testing.testProcessor.engineBehavior.setProgressDisplayer(JkTestProcessor.JkProgressOutputStyle.TREE);
        project.testing.compilation.configureDependencies(deps -> deps
                .and("org.junit.jupiter:junit-jupiter:5.9.2")
        );

        // Publication is only necessary if your project is being deployed on a binary repository.
        // Many projects as jee war jar, springboot application, tools, Graphical application
        // does not need this section at all.  In this case you can remove it.
        project.publication
            .setModuleId("your.group:your.project")
            .setVersion(() -> JkGitProcess.of().getVersionFromTag());  // Version inferred from Git
    }

    public void cleanPack() {
        cleanOutput(); projectBean.pack();
    }

}
