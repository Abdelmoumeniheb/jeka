package dev.jeka.core.api.system;

import dev.jeka.core.api.utils.JkUtilsAssert;

import java.io.ByteArrayOutputStream;
import java.util.Arrays;
import java.util.List;

/**
 * Represents a handler for a running process.
 * This class provides methods to interact with the process.
 */
public class JkProcHandler {

    private final Process process;

    private final ByteArrayOutputStream outputStream;

    JkProcHandler(Process process, ByteArrayOutputStream outputStream) {
        this.process = process;
        this.outputStream = outputStream;
    }

    /**
     * Returns the process associated with this handler.
     */
    public Process getProcess() {
        return process;
    }

    /**
     * Returns true if the executed process has collected output.
     * <p>
     * To collect output, process has to be configured explicitly by invoking {@link JkAbstractProcess#setCollectOutput(boolean)}.
     */
    public boolean hasCollectedOutput() {
        return outputStream != null;
    }

    /**
     * Returns the output generated by the process.
     *
     * @throws IllegalStateException if the process has not collected output
     */
    public String getOutput() {
        JkUtilsAssert.state(outputStream != null, JkProcResult.NO_COLLECT_MSG);
        return outputStream.toString();
    }

    /**
     * Returns the output generated by the executed process as a list of strings.
     */
    public List<String> getOutputMultiline() {
        return  Arrays.asList(getOutput().split("\\r?\n"));
    }



}
