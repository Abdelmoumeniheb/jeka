import dev.jeka.core.api.java.JkJavaVersion;
import dev.jeka.core.api.java.testing.JkTestProcessor;
import dev.jeka.core.api.java.testing.JkTestSelection;
import dev.jeka.core.api.tooling.JkGitWrapper;
import dev.jeka.core.tool.JkClass;
import dev.jeka.core.tool.builtins.java.JkPluginJava;

class Build extends JkClass {

    final JkPluginJava java = getPlugin(JkPluginJava.class);

    /*
     * Configures plugins to be bound to this command class. When this method is called, option
     * fields have already been injected from command line.
     */
    @Override
    protected void setup() {
        java.getProject()
            .getConstruction()
                .setJavaVersion(JkJavaVersion.V8)
                .getCompilation()
                    .setDependencies(deps -> deps
                        .and("com.google.guava:guava:21.0")
                    )
                .__

                // this testing setup is almost default setting, this is here for illustration purpose
                // If default is ok for you, you can remove it.
                .getTesting()
                    .getCompilation().setDependencies(deps -> deps
                        .and("org.junit.jupiter:junit-jupiter:5.8.1"))
                    .__
                    .getTestSelection()
                        .addIncludeStandardPatterns()
                        .addIncludePatterns(JkTestSelection.IT_INCLUDE_PATTERN)
                    .__
                    .getTestProcessor()
                        .setForkingProcess(true)
                        .getEngineBehavior()
                            .setProgressDisplayer(JkTestProcessor.JkProgressOutputStyle.TREE)
                        .__
                    .__
                .__
            .__

            // Publication is only necessary if your project is being deployed on a binary repository.
            // Many projects as jee war jar, springboot application, tools, Graphical application
            // does not need this section at all.  In this case you can remove it.
            .getPublication().getMaven()
                .setModuleId("your.group:your.project")
                .setVersion(JkGitWrapper.of(getBaseDir()).getVersionFromTag());  // Version inferred from Git
    }

    public void cleanPack() {
        clean(); java.pack();
    }

}
