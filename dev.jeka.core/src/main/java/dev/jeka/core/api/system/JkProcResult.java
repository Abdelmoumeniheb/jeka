/*
 * Copyright 2014-2024  the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package dev.jeka.core.api.system;

import dev.jeka.core.api.utils.JkUtilsAssert;

import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.List;

/**
 * Represents the result of a process execution.
 */
public class JkProcResult {

    static final String NO_COLLECT_MSG = "The process has been launched without collecting %s, or with inheritIO=true, " +
            "therefore the output result can't be retrieved.\n" +
            "Execute the process using #setCollect%s(true), and/or disable inheritIO, to retrieve the output.";

    private final int exitCode;

    private final byte[] collectedStdout;

    private final byte[] collectedStderr;

    JkProcResult(int exitCode, byte[] collectedStdout, byte[] collectedStderr) {
        this.exitCode = exitCode;
        this.collectedStdout = collectedStdout;
        this.collectedStderr = collectedStderr;
    }

    /**
     * Returns the exit code of the process execution.
     */
    public int getExitCode() {
        return exitCode;
    }

    /**
     * Returns true if the process execution succeeded. It Returns false if the <i>exit code</i> differs from <code>0</code>.
     */
    public boolean hasSucceed() {
        return exitCode == 0;
    }

    /**
     * Asserts that the process execution succeeded. Throws an {@link IllegalStateException} if the process
     * execution failed (i.e. the exit code is not 0).
     */
    public void assertSucceed() {
        JkUtilsAssert.state(hasSucceed(), "Process failed. Exit code : %s ", exitCode);
    }

    /**
     * Returns the stdout generated by the executed process.
     */
    public byte[] getStdout() {
        JkUtilsAssert.state(hasCollectedStdout(), NO_COLLECT_MSG);
        return collectedStdout;
    }

    /**
     * Returns the stderr generated by the executed process.
     */
    public byte[] getStderr() {
        JkUtilsAssert.state(hasCollectedStdout(), NO_COLLECT_MSG);
        return collectedStderr;
    }

    /**
     * Returns true if the executed process has collected stdout.
     * <p>
     * To collect output, process has to be configured explicitly by invoking {@link JkAbstractProcess#setCollectStdout(boolean)}.
     */
    public boolean hasCollectedStdout() {
        return collectedStdout != null;
    }

    /**
     * Returns true if the executed process has collected stdErr.
     * <p>
     * To collect output, process has to be configured explicitly by invoking {@link JkAbstractProcess#setCollectStdout(boolean)}.
     */
    public boolean hasCollectedStderr() {
        return collectedStderr != null;
    }

    /**
     * Returns the output generated by the executed process as a string, assuming UTF-8 encoding.
     */
    public String getStdoutAsString() {
        JkUtilsAssert.state(hasCollectedStdout(), NO_COLLECT_MSG, "std out", "Stdout");
        return new String(collectedStdout, StandardCharsets.UTF_8);
    }

    /**
     * Returns the output generated by the executed process as a list of strings, where each string represents a line of output.
     * This method assumes that the output is collected and is in UTF-8 encoding.
     */
    public List<String> getStdoutAsMultiline() {
        return Arrays.asList(getStdoutAsString().split("\n"));
    }

    /**
     * Returns the output generated by the executed process as a string, assuming UTF-8 encoding.
     */
    public String getStderrAsString() {
        JkUtilsAssert.state(hasCollectedStderr(), NO_COLLECT_MSG, "std err", "StdErr");
        return new String(collectedStderr, StandardCharsets.UTF_8);
    }

}
