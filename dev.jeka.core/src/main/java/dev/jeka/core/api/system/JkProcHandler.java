package dev.jeka.core.api.system;

import dev.jeka.core.api.utils.JkUtilsAssert;
import dev.jeka.core.api.utils.JkUtilsReflect;
import dev.jeka.core.api.utils.JkUtilsSystem;

import java.io.ByteArrayOutputStream;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.TimeUnit;

/**
 * Represents a handler for a running process.
 * This class provides methods to interact with the process.
 */
public class JkProcHandler {

    private final Process process;

    private final ByteArrayOutputStream outputStream;

    JkProcHandler(Process process, ByteArrayOutputStream outputStream) {
        this.process = process;
        this.outputStream = outputStream;
    }

    /**
     * Returns the process associated with this handler.
     */
    public Process getProcess() {
        return process;
    }

    /**
     * Returns true if the executed process has collected output.
     * <p>
     * To collect output, process has to be configured explicitly by invoking {@link JkAbstractProcess#setCollectStdout(boolean)}.
     */
    public boolean hasCollectedOutput() {
        return outputStream != null;
    }

    /**
     * Returns the output generated by the process.
     *
     * @throws IllegalStateException if the process has not collected output
     */
    public String getOutput() {
        JkUtilsAssert.state(outputStream != null, JkProcResult.NO_COLLECT_MSG);
        return outputStream.toString();
    }

    /**
     * Returns the output generated by the executed process as a list of strings.
     */
    public List<String> getOutputMultiline() {
        return  Arrays.asList(getOutput().split("\\r?\n"));
    }

    /**
     * Returns the process ID (PID) of the given process.
     *
     * <p>
     * This method is used to obtain the PID of a process on a non-Windows system.
     * It uses reflection to access the "pid" field of the provided Process object.
     *
     * @return the PID of the provided process
     * @throws IllegalStateException if the system is Windows and PID retrieval is not supported
     */
    public int getPid() {
        JkUtilsAssert.state(!JkUtilsSystem.IS_WINDOWS, "Can't get pid for Windows system");
        return (Integer) JkUtilsReflect.getFieldValue(process, "pid");
    }

    public int waitFor() {
        try {
            return process.waitFor();
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }
    }

    public boolean waitFor(long timeout, TimeUnit timeUnit) {
        try {
            return process.waitFor(timeout, timeUnit);
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }
    }



}
