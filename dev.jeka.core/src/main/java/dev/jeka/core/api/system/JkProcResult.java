package dev.jeka.core.api.system;

import dev.jeka.core.api.utils.JkUtilsAssert;

import java.util.Arrays;
import java.util.List;

/**
 * Represents the result of a process execution.
 */
public class JkProcResult {

    static final String NO_COLLECT_MSG = "The process has been launched without collecting output, or with inheritIO=true, " +
            "therefore the output result can't be retrieved.\n" +
            "Execute the process using #setCollectOutput(true), and/or disable inheritIO, to retrieve the output.";

    private final int exitCode;

    private final String output;

    JkProcResult(int exitCode, String output) {
        this.exitCode = exitCode;
        this.output = output;
    }

    /**
     * Returns the exit code of the process execution.
     */
    public int getExitCode() {
        return exitCode;
    }

    /**
     * Returns true if the process execution succeeded. It Returns false if the <i>exit code</i> differs from <code>0</code>.
     */
    public boolean hasSucceed() {
        return exitCode == 0;
    }

    /**
     * Asserts that the process execution succeeded. Throws an {@link IllegalStateException} if the process
     * execution failed (i.e. the exit code is not 0).
     */
    public void assertSucceed() {
        JkUtilsAssert.state(hasSucceed(), "Process failed. Exit code : %s ", exitCode);
    }

    /**
     * Returns the output generated by the executed process.
     */
    public String getOutput() {
        JkUtilsAssert.state(hasCollectedOutput(), NO_COLLECT_MSG);
        return output;
    }

    /**
     * Returns true if the executed process has collected output.
     * <p>
     * To collect output, process has to be configured explicitly by invoking {@link JkAbstractProcess#setCollectOutput(boolean)}.
     */
    public boolean hasCollectedOutput() {
        return output != null;
    }

    /**
     * Returns the output generated by the executed process as a list of strings.
     */
    public List<String> getOutputMultiline() {
        return  Arrays.asList(getOutput().split("\\r?\n"));
    }

}
